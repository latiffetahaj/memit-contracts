{
  "address": "0xBC93b4531dc0E18097A18af3eFEfA0377E60d2D3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyClaimed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClaimDateIsPending",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FairLaunchHasEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FairLaunchIsStillLive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LiquidtyIsNotYetAdded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MathOverflowedMulDiv",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "YourAmountIsZero",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Contribution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claims",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectAllFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contribute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "contributions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "lpAdded",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "sleepfinance",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "team",
              "type": "address"
            },
            {
              "internalType": "contract IERC20Minimal",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "contract IWETH9",
              "name": "weth",
              "type": "address"
            },
            {
              "internalType": "contract INonfungiblePositionManager",
              "name": "uniswap",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct IFairLaunch.Setting",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Minimal",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "removeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settings",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "lpAdded",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "sleepfinance",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "team",
              "type": "address"
            },
            {
              "internalType": "contract IERC20Minimal",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "contract IWETH9",
              "name": "weth",
              "type": "address"
            },
            {
              "internalType": "contract INonfungiblePositionManager",
              "name": "uniswap",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct IFairLaunch.Setting",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teamClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teamHasClaimedTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenomics",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "membersReward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "membersAllocation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidityAllocation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "teamAllocation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalContribution",
              "type": "uint256"
            }
          ],
          "internalType": "struct IFairLaunch.Tokenomics",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x15bd5366a5f358434fad7d51dd838983e451aa27970c3eff3c66c0375f04fa31",
  "receipt": {
    "to": null,
    "from": "0x62f4b9e31E94c539dAef18046B7398d0aAD58416",
    "contractAddress": "0xBC93b4531dc0E18097A18af3eFEfA0377E60d2D3",
    "transactionIndex": 3,
    "gasUsed": "1747483",
    "logsBloom": "0x
    "blockHash": "0x4ee8a46b9c0df6672d58eec5e57e28407cbb802638bf0b8b86e531a8307a0f85",
    "transactionHash": "0x15bd5366a5f358434fad7d51dd838983e451aa27970c3eff3c66c0375f04fa31",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 39369331,
        "transactionHash": "0x15bd5366a5f358434fad7d51dd838983e451aa27970c3eff3c66c0375f04fa31",
        "address": "0xBC93b4531dc0E18097A18af3eFEfA0377E60d2D3",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 4,
        "blockHash": "0x4ee8a46b9c0df6672d58eec5e57e28407cbb802638bf0b8b86e531a8307a0f85"
      }
    ],
    "blockNumber": 39369331,
    "cumulativeGasUsed": "1920533",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8de48f4a09923ad8dc755c9f03d360ca",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimDateIsPending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FairLaunchHasEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FairLaunchIsStillLive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidtyIsNotYetAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"YourAmountIsZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Contribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectAllFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"lpAdded\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"sleepfinance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"team\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Minimal\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contract IWETH9\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"uniswap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"internalType\":\"struct IFairLaunch.Setting\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Minimal\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settings\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"lpAdded\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"sleepfinance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"team\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Minimal\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contract IWETH9\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"uniswap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"internalType\":\"struct IFairLaunch.Setting\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamHasClaimedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenomics\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"membersReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"membersAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalContribution\",\"type\":\"uint256\"}],\"internalType\":\"struct IFairLaunch.Tokenomics\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity()\":{\"notice\":\"Add Liquiduity after sale date ends\"},\"collectAllFees()\":{\"notice\":\"project dev can collect fees\"},\"removeTokens(address)\":{\"notice\":\"project dev remove any ERC20Tokens Sent here after Launch\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Fairlaunch.sol\":\"Fairlaunch\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or\\n * {IERC721-setApprovalForAll}.\\n */\\nabstract contract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xaad20f8713b5cd98114278482d5d91b9758f9727048527d582e8e88fd4901fd8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"contracts/Fairlaunch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./interfaces/INonfungiblePositionManager.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/IERC20Minimal.sol\\\";\\nimport \\\"./interfaces/IFairLaunch.sol\\\";\\nimport \\\"./library/UniswapV3PricingHelper.sol\\\";\\n\\ncontract Fairlaunch is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ERC721Holder,\\n    IFairLaunch\\n{\\n    using Address for address payable;\\n    int24 private MIN_TICK;\\n    int24 private MAX_TICK;\\n    int24 private TICK_SPACING;\\n    uint256 public tokenId;\\n    address public pool;\\n    mapping(address => uint256) public contributions;\\n    mapping(address => uint256) public claims;\\n    mapping(address => uint256) public claimDate;\\n    bool public teamHasClaimedTokens;\\n    Setting _settings;\\n    Tokenomics _tokenomics;\\n    uint256 public count;\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(Setting calldata config) public initializer {\\n        // team will buy back ownership in order to claim fees\\n        __Ownable_init(config.sleepfinance);\\n        _settings = config;\\n        MIN_TICK = -887272;\\n        MAX_TICK = -MIN_TICK;\\n        TICK_SPACING = 60;\\n        uint256 tbal = _settings.token.balanceOf(address(this));\\n        _tokenomics.membersReward = Math.mulDiv(tbal, 500, 10000); //5%\\n        _tokenomics.membersAllocation = Math.mulDiv(tbal, 4500, 10000); //45%\\n        _tokenomics.liquidityAllocation = Math.mulDiv(tbal, 4000, 10000); //40%\\n        _tokenomics.teamAllocation = Math.mulDiv(tbal, 1000, 10000); //10%\\n        claimDate[_settings.team] = block.timestamp + 25 days; //25day lock\\n    }\\n\\n    function tokenomics() external view returns (Tokenomics memory) {\\n        return _tokenomics;\\n    }\\n\\n    function settings() external view returns (Setting memory) {\\n        return _settings;\\n    }\\n\\n    function contribute() external payable {\\n        if (msg.value < 0) revert YourAmountIsZero();\\n        if (_settings.endTime < block.timestamp) revert FairLaunchHasEnded();\\n        if (contributions[_msgSender()] == 0) count++;\\n        contributions[_msgSender()] += msg.value;\\n        claimDate[_msgSender()] = block.timestamp + 10 days;\\n        count++;\\n        emit Contribution(_msgSender(), msg.value);\\n    }\\n\\n    function claim() external {\\n        if (!_settings.lpAdded) revert LiquidtyIsNotYetAdded();\\n        if (claimDate[_msgSender()] > block.timestamp)\\n            revert ClaimDateIsPending();\\n        if (claims[_msgSender()] > 0) revert AlreadyClaimed();\\n        claims[_msgSender()] = Math.mulDiv(\\n            contributions[_msgSender()],\\n            _tokenomics.membersAllocation,\\n            _tokenomics.totalContribution\\n        );\\n        _settings.token.transfer(_msgSender(), claims[_msgSender()]);\\n    }\\n\\n    function teamClaim() external {\\n        if (!_settings.lpAdded) revert LiquidtyIsNotYetAdded();\\n        if (claimDate[_settings.team] > block.timestamp)\\n            revert ClaimDateIsPending();\\n        if (teamHasClaimedTokens) revert AlreadyClaimed();\\n        teamHasClaimedTokens = true;\\n        _settings.token.transfer(_settings.team, _tokenomics.teamAllocation);\\n        _settings.token.transfer(\\n            _settings.sleepfinance,\\n            _tokenomics.membersReward\\n        );\\n    }\\n\\n    /**\\n     * Add Liquiduity after sale date ends\\n     */\\n    function addLiquidity() external {\\n        if (_settings.endTime > block.timestamp) revert FairLaunchIsStillLive();\\n        uint256 total = address(this).balance;\\n        payable(_settings.team).sendValue(Math.mulDiv(total, 1000, 10000));\\n        payable(_settings.sleepfinance).sendValue(\\n            Math.mulDiv(total, 500, 10000)\\n        );\\n        _tokenomics.totalContribution = address(this).balance;\\n        _addLp();\\n    }\\n\\n    function createPool(uint256 tokenAmt, uint256 baseAmt) internal {\\n        (\\n            address token0,\\n            address token1,\\n            uint160 initSQRTPrice\\n        ) = UniswapV3PricingHelper.getInitPrice(\\n                address(_settings.weth),\\n                address(_settings.token),\\n                tokenAmt,\\n                baseAmt\\n            );\\n        pool = _settings.uniswap.createAndInitializePoolIfNecessary(\\n            token0, // token0\\n            token1, // token1\\n            3000,\\n            initSQRTPrice\\n        );\\n    }\\n\\n    function _addLp()\\n        internal\\n        returns (uint128 liquidity, uint256 amount0, uint256 amount1)\\n    {\\n        uint256 amount0ToAdd = _tokenomics.liquidityAllocation; // 40%\\n        uint256 balance = address(this).balance;\\n        _settings.weth.deposit{value: balance}();\\n        uint256 amount1ToAdd = _settings.weth.balanceOf(address(this));\\n        createPool(amount0ToAdd, amount1ToAdd);\\n        _settings.token.approve(address(_settings.uniswap), amount0ToAdd);\\n        _settings.weth.approve(address(_settings.uniswap), amount1ToAdd);\\n        INonfungiblePositionManager.MintParams memory params = INonfungiblePositionManager\\n            .MintParams({\\n                token0: address(_settings.token),\\n                token1: address(_settings.weth),\\n                fee: 3000,\\n                tickLower: (MIN_TICK / TICK_SPACING) * TICK_SPACING,\\n                tickUpper: (MAX_TICK / TICK_SPACING) * TICK_SPACING,\\n                amount0Desired: amount0ToAdd,\\n                amount1Desired: amount1ToAdd,\\n                amount0Min: 0, // slippage??\\n                amount1Min: 0, // slippage??\\n                recipient: address(this),\\n                deadline: block.timestamp\\n            });\\n        (tokenId, liquidity, amount0, amount1) = _settings.uniswap.mint(params);\\n        if (amount0 < amount0ToAdd) {\\n            _settings.token.approve(address(_settings.uniswap), 0);\\n        }\\n        if (amount1 < amount1ToAdd) {\\n            _settings.weth.approve(address(_settings.uniswap), 0);\\n        }\\n        _settings.lpAdded = true;\\n    }\\n\\n    /**\\n     * project dev can collect fees\\n     */\\n    function collectAllFees() external {\\n        if (!_settings.lpAdded) revert LiquidtyIsNotYetAdded();\\n        INonfungiblePositionManager.CollectParams\\n            memory params = INonfungiblePositionManager.CollectParams({\\n                tokenId: tokenId,\\n                recipient: owner(),\\n                amount0Max: type(uint128).max,\\n                amount1Max: type(uint128).max\\n            });\\n        _settings.uniswap.collect(params);\\n    }\\n\\n    /**\\n     * project dev remove any ERC20Tokens Sent here after Launch\\n     */\\n    function removeTokens(IERC20Minimal token) external {\\n        // some users are still claiming.\\n        if (_settings.endTime > block.timestamp - 30 days)\\n            revert LiquidtyIsNotYetAdded();\\n        uint256 tbal = token.balanceOf(address(this));\\n        if (tbal > 0) token.transfer(owner(), tbal);\\n        uint256 ethBal = address(this).balance;\\n        if (ethBal > 0) payable(owner()).sendValue(ethBal);\\n    }\\n\\n    receive() external payable {}\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256 _tokenId,\\n        bytes memory\\n    ) public override returns (bytes4) {\\n        tokenId = _tokenId;\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xfbfe8af1852369911cb5cd35444b246e24738490119318366f00e8cc88bbbaee\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Minimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.20;\\nimport \\\"./IToken.sol\\\";\\n\\n/// @title Minimal ERC20 interface for Uniswap\\n/// @notice Contains a subset of the full ERC20 interface that is used in Uniswap V3\\ninterface IERC20Minimal is IToken {\\n    /// @notice Returns the balance of a token\\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\\n    /// @return The number of tokens held by the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\\n    /// @param recipient The account that will receive the amount transferred\\n    /// @param amount The number of tokens to send from the sender to the recipient\\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /// @notice Returns the current allowance given to a spender by an owner\\n    /// @param owner The account of the token owner\\n    /// @param spender The account of the token spender\\n    /// @return The current allowance granted by `owner` to `spender`\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\\n    /// @param amount The amount of tokens allowed to be used by `spender`\\n    /// @return Returns true for a successful approval, false for unsuccessful\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\\n    /// @param sender The account from which the transfer will be initiated\\n    /// @param recipient The recipient of the transfer\\n    /// @param amount The amount of the transfer\\n    /// @return Returns true for a successful transfer, false for unsuccessful\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /// @notice Mints a given amount of tokens to a given address\\n    /// @param to The account which will receive the created tokens\\n    /// @param amount The amount of tokens to create\\n    function mint(address to, uint256 amount) external;\\n\\n    //  @dev Destroys a `value` amount of tokens from `account`, deducting fromthe caller's allowance.\\n    //  @param account The account which will have tokens destroyed\\n    //  @param value The amount of tokens to destroy\\n\\n    function burnFrom(address account, uint256 value) external;\\n\\n    function burn(uint256 value) external;\\n\\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\\n    /// @param value The amount of tokens that were transferred\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\\n    /// @param owner The account that approved spending of its tokens\\n    /// @param spender The account for which the spending allowance was modified\\n    /// @param value The new allowance from the owner to the spender\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x37649569868647ac1d288198c0f4536a33f8abe304c1833c9d629f81f00c0855\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IFairLaunch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\nimport \\\"./INonfungiblePositionManager.sol\\\";\\nimport \\\"./IWETH.sol\\\";\\nimport \\\"./IERC20Minimal.sol\\\";\\nimport \\\"../library/UniswapV3PricingHelper.sol\\\";\\n\\ninterface IFairLaunch {\\n    error LiquidtyIsNotYetAdded();\\n    error FairLaunchIsStillLive();\\n    error FairLaunchHasEnded();\\n    error ClaimDateIsPending();\\n    error AlreadyClaimed();\\n    error YourAmountIsZero();\\n    struct Setting {\\n        bool lpAdded;\\n        address sleepfinance;\\n        address team;\\n        IERC20Minimal token;\\n        IWETH9 weth;\\n        INonfungiblePositionManager uniswap;\\n        uint256 endTime;\\n    }\\n    struct Tokenomics {\\n        uint256 membersReward; //5%\\n        uint256 membersAllocation; //45\\n        uint256 liquidityAllocation; // 40\\n        uint256 teamAllocation; //10\\n        uint256 totalContribution;\\n    }\\n    event Contribution(address indexed user, uint256 amount);\\n    event Claimed(address indexed user, uint256 amount);\\n\\n    function initialize(Setting calldata config) external;\\n\\n    function tokenomics() external view returns (Tokenomics memory);\\n\\n    function settings() external view returns (Setting memory);\\n\\n    function contribute() external payable;\\n\\n    function claim() external;\\n\\n    function teamClaim() external;\\n\\n    /**\\n     * Add Liquiduity after sale date ends\\n     */\\n    function addLiquidity() external;\\n\\n    /**\\n     * project dev can collect fees\\n     */\\n    function collectAllFees() external;\\n\\n    /**\\n     * project dev remove any ERC20Tokens Sent here after Launch\\n     */\\n    function removeTokens(IERC20Minimal token) external;\\n}\\n\",\"keccak256\":\"0x58462e3f89d9b0a3755851d3f235c68624d1afa7565c5f5653411ebfa1f84d9a\",\"license\":\"MIT\"},\"contracts/interfaces/INonfungiblePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\n\\ninterface INonfungiblePositionManager is IERC721 {\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint amount0Desired;\\n        uint amount1Desired;\\n        uint amount0Min;\\n        uint amount1Min;\\n        address recipient;\\n        uint deadline;\\n    }\\n\\n    function mint(\\n        MintParams calldata params\\n    )\\n        external\\n        payable\\n        returns (uint tokenId, uint128 liquidity, uint amount0, uint amount1);\\n\\n    struct IncreaseLiquidityParams {\\n        uint tokenId;\\n        uint amount0Desired;\\n        uint amount1Desired;\\n        uint amount0Min;\\n        uint amount1Min;\\n        uint deadline;\\n    }\\n\\n    function increaseLiquidity(\\n        IncreaseLiquidityParams calldata params\\n    ) external payable returns (uint128 liquidity, uint amount0, uint amount1);\\n\\n    struct DecreaseLiquidityParams {\\n        uint tokenId;\\n        uint128 liquidity;\\n        uint amount0Min;\\n        uint amount1Min;\\n        uint deadline;\\n    }\\n\\n    function decreaseLiquidity(\\n        DecreaseLiquidityParams calldata params\\n    ) external payable returns (uint amount0, uint amount1);\\n\\n    struct CollectParams {\\n        uint tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    function collect(\\n        CollectParams calldata params\\n    ) external payable returns (uint amount0, uint amount1);\\n\\n    function createAndInitializePoolIfNecessary(\\n        address token0,\\n        address token1,\\n        uint24 fee,\\n        uint160 sqrtPriceX96\\n    ) external payable returns (address pool);\\n\\n    function positions(\\n        uint256 tokenId\\n    )\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n}\\n\",\"keccak256\":\"0x9206b2eab2ca7bbae614480929af65d8a2a1094f45ba6fc5c2baf544de0b0875\",\"license\":\"MIT\"},\"contracts/interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IToken {\\n    function initialize(\\n        string calldata name,\\n        string calldata symbol,\\n        uint256 supply\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1d0c25df4b6ff8e9534073a25a2e10ce7344ba3acd4a614023b799dc6f0c7586\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x1f733bd92c7b13e1a1b427c4b1be41d2bff6269eef8989ca1cd57c6eb6b5281c\",\"license\":\"MIT\"},\"contracts/library/UniswapV3PricingHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nlibrary UniswapV3PricingHelper {\\n    uint256 private constant padding = 100;\\n    // Constants\\n    uint256 private constant Q96 = 2 ** 96;\\n\\n    function _sortTokens(\\n        address _tokenA,\\n        address _tokenB\\n    ) internal pure returns (address _sortedTokenA, address _sortedTokenB) {\\n        require(\\n            _tokenA != address(0) && _tokenB != address(0),\\n            \\\"Token addresses cannot be zero.\\\"\\n        );\\n\\n        // Sort the token addresses\\n        (_sortedTokenA, _sortedTokenB) = _tokenA < _tokenB\\n            ? (_tokenA, _tokenB)\\n            : (_tokenB, _tokenA);\\n    }\\n\\n    function getInitPrice(\\n        address _tokenBase,\\n        address _tokenSwap,\\n        uint256 tokenBaseAmt,\\n        uint256 tokenSwapAmt\\n    )\\n        internal\\n        pure\\n        returns (address token0, address token1, uint160 initSQRTPrice)\\n    {\\n        (token0, token1) = _sortTokens(_tokenBase, _tokenSwap);\\n        if (token0 != _tokenBase)\\n            initSQRTPrice = encodePriceSqrt(tokenSwapAmt, tokenBaseAmt);\\n        else initSQRTPrice = encodePriceSqrt(tokenBaseAmt, tokenSwapAmt);\\n    }\\n\\n    // Encode price square root function\\n    function encodePriceSqrt(\\n        uint256 reserve0,\\n        uint256 reserve1\\n    ) internal pure returns (uint160 sqrtPriceX96) {\\n        require(reserve0 > 0 && reserve1 > 0, \\\"Reserves must be positive\\\");\\n        uint256 ratio = Math.sqrt(((reserve1 * padding) / reserve0) / padding) *\\n            Q96;\\n        sqrtPriceX96 = uint160(ratio);\\n    }\\n}\\n\",\"keccak256\":\"0x908de6a89e0477adf1344da48ed0c00f62927a45695143231f6279b1e8cbe46c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100d0565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff161561006e5760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b03908116146100cd5780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b611e2b806100df6000396000f3fe6080604052600436106101235760003560e01c80636ae146c2116100a0578063d7bb99ba11610064578063d7bb99ba1461037f578063e06174e414610387578063e8078d941461049d578063f2fde38b146104b2578063fc50baf5146104d257600080fd5b80636ae146c2146102e9578063715018a6146102fe5780638949614b146103135780638da5cb5b1461033d578063c6788bdd1461035257600080fd5b806342e94c90116100e757806342e94c901461021957806342f667a1146102465780634ac7251d146102685780634e71d92d146102bf578063686f2c90146102d457600080fd5b806306661abd1461012f5780630a3e86b114610158578063150b7a021461018557806316f0115b146101cb57806317d70f7c1461020357600080fd5b3661012a57005b600080fd5b34801561013b57600080fd5b5061014560125481565b6040519081526020015b60405180910390f35b34801561016457600080fd5b50610145610173366004611938565b60056020526000908152604090205481565b34801561019157600080fd5b506101b26101a036600461196b565b5060015550630a85bd0160e11b919050565b6040516001600160e01b0319909116815260200161014f565b3480156101d757600080fd5b506002546101eb906001600160a01b031681565b6040516001600160a01b03909116815260200161014f565b34801561020f57600080fd5b5061014560015481565b34801561022557600080fd5b50610145610234366004611938565b60036020526000908152604090205481565b34801561025257600080fd5b50610266610261366004611a4b565b6104f2565b005b34801561027457600080fd5b5061027d61075a565b60405161014f9190600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b3480156102cb57600080fd5b506102666107c1565b3480156102e057600080fd5b506102666108f3565b3480156102f557600080fd5b506102666109e6565b34801561030a57600080fd5b50610266610b37565b34801561031f57600080fd5b5060065461032d9060ff1681565b604051901515815260200161014f565b34801561034957600080fd5b506101eb610b4b565b34801561035e57600080fd5b5061014561036d366004611938565b60046020526000908152604090205481565b610266610b79565b34801561039357600080fd5b506104316040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152506040805160e08101825260075460ff8116151582526001600160a01b036101009091048116602083015260085481169282019290925260095482166060820152600a5482166080820152600b5490911660a0820152600c5460c082015290565b60405161014f9190600060e082019050825115158252602083015160018060a01b0380821660208501528060408601511660408501528060608601511660608501528060808601511660808501528060a08601511660a0850152505060c083015160c083015292915050565b3480156104a957600080fd5b50610266610c6b565b3480156104be57600080fd5b506102666104cd366004611938565b610cee565b3480156104de57600080fd5b506102666104ed366004611938565b610d2e565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156105385750825b905060008267ffffffffffffffff1660011480156105555750303b155b905081158015610563575080155b156105815760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156105ab57845460ff60401b1916600160401b1785555b6105c36105be6040880160208901611938565b610e7c565b8560076105d08282611a9e565b50506000805462ffffff191662f2761817908190556105f19060020b611b6d565b6000805468ffffffffffff0000001916630100000062ffffff939093169290920268ffffff000000000000191691909117663c0000000000001781556009546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610675573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106999190611b8f565b90506106aa816101f4612710610e8d565b600d556106bc81611194612710610e8d565b600e556106ce81610fa0612710610e8d565b600f556106e0816103e8612710610e8d565b6010556106f0426220f580611ba8565b6008546001600160a01b031660009081526005602052604090205550831561075257845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b61078c6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b506040805160a081018252600d548152600e546020820152600f54918101919091526010546060820152601154608082015290565b60075460ff166107e457604051630c2daf9b60e11b815260040160405180910390fd5b336000908152600560205260409020544210156108145760405163312d6e6b60e11b815260040160405180910390fd5b336000908152600460205260409020541561084257604051630c8d9eab60e31b815260040160405180910390fd5b33600090815260036020526040902054600e54601154610863929190610e8d565b33600081815260046020819052604091829020849055600954915163a9059cbb60e01b81529081019290925260248201929092526001600160a01b039091169063a9059cbb906044015b6020604051808303816000875af11580156108cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f09190611bbb565b50565b60075460ff1661091657604051630c2daf9b60e11b815260040160405180910390fd5b600060405180608001604052806001548152602001610933610b4b565b6001600160a01b0390811682526001600160801b0360208084018290526040938401829052600b54845163fc6f786560e01b8152865160048201529186015184166024830152938501518216604482015260608501519091166064820152929350169063fc6f78659060840160408051808303816000875af11580156109bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e19190611bd8565b505050565b60075460ff16610a0957604051630c2daf9b60e11b815260040160405180910390fd5b6008546001600160a01b0316600090815260056020526040902054421015610a445760405163312d6e6b60e11b815260040160405180910390fd5b60065460ff1615610a6857604051630c8d9eab60e31b815260040160405180910390fd5b6006805460ff1916600117905560095460085460105460405163a9059cbb60e01b81526001600160a01b039283166004820152602481019190915291169063a9059cbb906044016020604051808303816000875af1158015610ace573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af29190611bbb565b50600954600754600d5460405163a9059cbb60e01b81526001600160a01b0361010090930483166004820152602481019190915291169063a9059cbb906044016108ad565b610b3f610f52565b610b496000610f84565b565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b600c54421115610b9c57604051634963a92360e11b815260040160405180910390fd5b336000908152600360205260408120549003610bc85760128054906000610bc283611bfc565b91905055505b3360009081526003602052604081208054349290610be7908490611ba8565b90915550610bfa905042620d2f00611ba8565b336000908152600560205260408120919091556012805491610c1b83611bfc565b9190505550610c273390565b6001600160a01b03167f4d154d4aae216bed6d0926db77c00df2b57c6b5ba4eee05775de20facede3a7b34604051610c6191815260200190565b60405180910390a2565b600c54421015610c8e576040516306dcd0a160e41b815260040160405180910390fd5b47610cb3610ca1826103e8612710610e8d565b6008546001600160a01b031690610ff5565b610cdc610cc5826101f4612710610e8d565b60075461010090046001600160a01b031690610ff5565b47601155610ce861108c565b50505050565b610cf6610f52565b6001600160a01b038116610d2557604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6108f081610f84565b610d3b62278d0042611c15565b600c541115610d5d57604051630c2daf9b60e11b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610da4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc89190611b8f565b90508015610e5a57816001600160a01b031663a9059cbb610de7610b4b565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af1158015610e34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e589190611bbb565b505b4780156109e1576109e181610e6d610b4b565b6001600160a01b031690610ff5565b610e846114d6565b6108f08161151f565b6000838302816000198587098281108382030391505080600003610ec457838281610eba57610eba611c28565b0492505050610f4b565b808411610ee45760405163227bc15360e01b815260040160405180910390fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b33610f5b610b4b565b6001600160a01b031614610b495760405163118cdaa760e01b8152336004820152602401610d1c565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b804710156110185760405163cd78605960e01b8152306004820152602401610d1c565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611065576040519150601f19603f3d011682016040523d82523d6000602084013e61106a565b606091505b50509050806109e157604051630a12f52160e11b815260040160405180910390fd5b600f54600a5460408051630d0e30db60e41b8152905160009384938493919247926001600160a01b039092169163d0e30db0918491600480820192899290919082900301818588803b1580156110e157600080fd5b505af11580156110f5573d6000803e3d6000fd5b5050600a546040516370a0823160e01b8152306004820152600094506001600160a01b0390911692506370a082319150602401602060405180830381865afa158015611145573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111699190611b8f565b90506111758382611527565b600954600b5460405163095ea7b360e01b81526001600160a01b0391821660048201526024810186905291169063095ea7b3906044016020604051808303816000875af11580156111ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ee9190611bbb565b50600a54600b5460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b3906044016020604051808303816000875af1158015611244573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112689190611bbb565b5060408051610160810182526009546001600160a01b039081168252600a54166020820152610bb89181019190915260008054909190606082019066010000000000008104600290810b916112c0918391900b611c3e565b6112ca9190611c78565b600290810b825260005460209092019166010000000000008104820b916112fc9183916301000000909104900b611c3e565b6113069190611c78565b60020b815260208101869052604080820185905260006060830181905260808301523060a08301524260c090920191909152600b549051634418b22b60e11b81529192506001600160a01b031690638831645690611368908490600401611c9f565b6080604051808303816000875af1158015611387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ab9190611d63565b600193909355909850965094508386101561143b57600954600b5460405163095ea7b360e01b81526001600160a01b0391821660048201526000602482015291169063095ea7b3906044016020604051808303816000875af1158015611415573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114399190611bbb565b505b818510156114be57600a54600b5460405163095ea7b360e01b81526001600160a01b0391821660048201526000602482015291169063095ea7b3906044016020604051808303816000875af1158015611498573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114bc9190611bbb565b505b50506007805460ff1916600117905550929391925090565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610b4957604051631afcd79f60e31b815260040160405180910390fd5b610cf66114d6565b600a546009546000918291829161154c916001600160a01b0391821691168787611605565b600b546040516309f56ab160e11b81526001600160a01b0380861660048301528085166024830152610bb86044830152808416606483015294975092955090935091909116906313ead562906084016020604051808303816000875af11580156115ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115de9190611dad565b600280546001600160a01b0319166001600160a01b03929092169190911790555050505050565b60008060006116148787611654565b90935091506001600160a01b038084169088161461163d5761163684866116f1565b905061164a565b61164785856116f1565b90505b9450945094915050565b6000806001600160a01b0384161580159061167757506001600160a01b03831615155b6116c35760405162461bcd60e51b815260206004820152601f60248201527f546f6b656e206164647265737365732063616e6e6f74206265207a65726f2e006044820152606401610d1c565b826001600160a01b0316846001600160a01b0316106116e35782846116e6565b83835b909590945092505050565b600080831180156117025750600082115b61174e5760405162461bcd60e51b815260206004820152601960248201527f5265736572766573206d75737420626520706f736974697665000000000000006044820152606401610d1c565b6000600160601b61177e6064866117658288611dca565b61176f9190611de1565b6117799190611de1565b611790565b6117889190611dca565b949350505050565b6000816000036117a257506000919050565b600060016117af84611878565b901c6001901b905060018184816117c8576117c8611c28565b048201901c905060018184816117e0576117e0611c28565b048201901c905060018184816117f8576117f8611c28565b048201901c9050600181848161181057611810611c28565b048201901c9050600181848161182857611828611c28565b048201901c9050600181848161184057611840611c28565b048201901c9050600181848161185857611858611c28565b048201901c9050610f4b8182858161187257611872611c28565b0461190d565b600080608083901c1561188d57608092831c92015b604083901c1561189f57604092831c92015b602083901c156118b157602092831c92015b601083901c156118c357601092831c92015b600883901c156118d557600892831c92015b600483901c156118e757600492831c92015b600283901c156118f957600292831c92015b600183901c15611907576001015b92915050565b600081831061191c5781610f4b565b5090919050565b6001600160a01b03811681146108f057600080fd5b60006020828403121561194a57600080fd5b8135610f4b81611923565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561198157600080fd5b843561198c81611923565b9350602085013561199c81611923565b925060408501359150606085013567ffffffffffffffff808211156119c057600080fd5b818701915087601f8301126119d457600080fd5b8135818111156119e6576119e6611955565b604051601f8201601f19908116603f01168101908382118183101715611a0e57611a0e611955565b816040528281528a6020848701011115611a2757600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600060e08284031215611a5d57600080fd5b50919050565b80151581146108f057600080fd5b6000813561190781611923565b80546001600160a01b0319166001600160a01b0392909216919091179055565b8135611aa981611a63565b815490151560ff1660ff19919091161781556020820135611ac981611923565b8154610100600160a81b031916600882901b610100600160a81b031617825550611b01611af860408401611a71565b60018301611a7e565b611b19611b1060608401611a71565b60028301611a7e565b611b31611b2860808401611a71565b60038301611a7e565b611b49611b4060a08401611a71565b60048301611a7e565b60c082013560058201555050565b634e487b7160e01b600052601160045260246000fd5b60008160020b627fffff198103611b8657611b86611b57565b60000392915050565b600060208284031215611ba157600080fd5b5051919050565b8082018082111561190757611907611b57565b600060208284031215611bcd57600080fd5b8151610f4b81611a63565b60008060408385031215611beb57600080fd5b505080516020909101519092909150565b600060018201611c0e57611c0e611b57565b5060010190565b8181038181111561190757611907611b57565b634e487b7160e01b600052601260045260246000fd5b60008160020b8360020b80611c5557611c55611c28565b627fffff19821460001982141615611c6f57611c6f611b57565b90059392505050565b60008260020b8260020b028060020b9150808214611c9857611c98611b57565b5092915050565b81516001600160a01b0316815261016081016020830151611ccb60208401826001600160a01b03169052565b506040830151611ce2604084018262ffffff169052565b506060830151611cf7606084018260020b9052565b506080830151611d0c608084018260020b9052565b5060a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151611d52828501826001600160a01b03169052565b505061014092830151919092015290565b60008060008060808587031215611d7957600080fd5b8451935060208501516001600160801b0381168114611d9757600080fd5b6040860151606090960151949790965092505050565b600060208284031215611dbf57600080fd5b8151610f4b81611923565b808202811582820484141761190757611907611b57565b600082611df057611df0611c28565b50049056fea264697066735822122047dc8bf659bf0c697cb6cce35b4b70324b45a4f9dd17b2a6ab9cd6fa3972fbc664736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106101235760003560e01c80636ae146c2116100a0578063d7bb99ba11610064578063d7bb99ba1461037f578063e06174e414610387578063e8078d941461049d578063f2fde38b146104b2578063fc50baf5146104d257600080fd5b80636ae146c2146102e9578063715018a6146102fe5780638949614b146103135780638da5cb5b1461033d578063c6788bdd1461035257600080fd5b806342e94c90116100e757806342e94c901461021957806342f667a1146102465780634ac7251d146102685780634e71d92d146102bf578063686f2c90146102d457600080fd5b806306661abd1461012f5780630a3e86b114610158578063150b7a021461018557806316f0115b146101cb57806317d70f7c1461020357600080fd5b3661012a57005b600080fd5b34801561013b57600080fd5b5061014560125481565b6040519081526020015b60405180910390f35b34801561016457600080fd5b50610145610173366004611938565b60056020526000908152604090205481565b34801561019157600080fd5b506101b26101a036600461196b565b5060015550630a85bd0160e11b919050565b6040516001600160e01b0319909116815260200161014f565b3480156101d757600080fd5b506002546101eb906001600160a01b031681565b6040516001600160a01b03909116815260200161014f565b34801561020f57600080fd5b5061014560015481565b34801561022557600080fd5b50610145610234366004611938565b60036020526000908152604090205481565b34801561025257600080fd5b50610266610261366004611a4b565b6104f2565b005b34801561027457600080fd5b5061027d61075a565b60405161014f9190600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b3480156102cb57600080fd5b506102666107c1565b3480156102e057600080fd5b506102666108f3565b3480156102f557600080fd5b506102666109e6565b34801561030a57600080fd5b50610266610b37565b34801561031f57600080fd5b5060065461032d9060ff1681565b604051901515815260200161014f565b34801561034957600080fd5b506101eb610b4b565b34801561035e57600080fd5b5061014561036d366004611938565b60046020526000908152604090205481565b610266610b79565b34801561039357600080fd5b506104316040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152506040805160e08101825260075460ff8116151582526001600160a01b036101009091048116602083015260085481169282019290925260095482166060820152600a5482166080820152600b5490911660a0820152600c5460c082015290565b60405161014f9190600060e082019050825115158252602083015160018060a01b0380821660208501528060408601511660408501528060608601511660608501528060808601511660808501528060a08601511660a0850152505060c083015160c083015292915050565b3480156104a957600080fd5b50610266610c6b565b3480156104be57600080fd5b506102666104cd366004611938565b610cee565b3480156104de57600080fd5b506102666104ed366004611938565b610d2e565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156105385750825b905060008267ffffffffffffffff1660011480156105555750303b155b905081158015610563575080155b156105815760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156105ab57845460ff60401b1916600160401b1785555b6105c36105be6040880160208901611938565b610e7c565b8560076105d08282611a9e565b50506000805462ffffff191662f2761817908190556105f19060020b611b6d565b6000805468ffffffffffff0000001916630100000062ffffff939093169290920268ffffff000000000000191691909117663c0000000000001781556009546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610675573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106999190611b8f565b90506106aa816101f4612710610e8d565b600d556106bc81611194612710610e8d565b600e556106ce81610fa0612710610e8d565b600f556106e0816103e8612710610e8d565b6010556106f0426220f580611ba8565b6008546001600160a01b031660009081526005602052604090205550831561075257845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b61078c6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b506040805160a081018252600d548152600e546020820152600f54918101919091526010546060820152601154608082015290565b60075460ff166107e457604051630c2daf9b60e11b815260040160405180910390fd5b336000908152600560205260409020544210156108145760405163312d6e6b60e11b815260040160405180910390fd5b336000908152600460205260409020541561084257604051630c8d9eab60e31b815260040160405180910390fd5b33600090815260036020526040902054600e54601154610863929190610e8d565b33600081815260046020819052604091829020849055600954915163a9059cbb60e01b81529081019290925260248201929092526001600160a01b039091169063a9059cbb906044015b6020604051808303816000875af11580156108cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f09190611bbb565b50565b60075460ff1661091657604051630c2daf9b60e11b815260040160405180910390fd5b600060405180608001604052806001548152602001610933610b4b565b6001600160a01b0390811682526001600160801b0360208084018290526040938401829052600b54845163fc6f786560e01b8152865160048201529186015184166024830152938501518216604482015260608501519091166064820152929350169063fc6f78659060840160408051808303816000875af11580156109bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e19190611bd8565b505050565b60075460ff16610a0957604051630c2daf9b60e11b815260040160405180910390fd5b6008546001600160a01b0316600090815260056020526040902054421015610a445760405163312d6e6b60e11b815260040160405180910390fd5b60065460ff1615610a6857604051630c8d9eab60e31b815260040160405180910390fd5b6006805460ff1916600117905560095460085460105460405163a9059cbb60e01b81526001600160a01b039283166004820152602481019190915291169063a9059cbb906044016020604051808303816000875af1158015610ace573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af29190611bbb565b50600954600754600d5460405163a9059cbb60e01b81526001600160a01b0361010090930483166004820152602481019190915291169063a9059cbb906044016108ad565b610b3f610f52565b610b496000610f84565b565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b600c54421115610b9c57604051634963a92360e11b815260040160405180910390fd5b336000908152600360205260408120549003610bc85760128054906000610bc283611bfc565b91905055505b3360009081526003602052604081208054349290610be7908490611ba8565b90915550610bfa905042620d2f00611ba8565b336000908152600560205260408120919091556012805491610c1b83611bfc565b9190505550610c273390565b6001600160a01b03167f4d154d4aae216bed6d0926db77c00df2b57c6b5ba4eee05775de20facede3a7b34604051610c6191815260200190565b60405180910390a2565b600c54421015610c8e576040516306dcd0a160e41b815260040160405180910390fd5b47610cb3610ca1826103e8612710610e8d565b6008546001600160a01b031690610ff5565b610cdc610cc5826101f4612710610e8d565b60075461010090046001600160a01b031690610ff5565b47601155610ce861108c565b50505050565b610cf6610f52565b6001600160a01b038116610d2557604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6108f081610f84565b610d3b62278d0042611c15565b600c541115610d5d57604051630c2daf9b60e11b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610da4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc89190611b8f565b90508015610e5a57816001600160a01b031663a9059cbb610de7610b4b565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af1158015610e34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e589190611bbb565b505b4780156109e1576109e181610e6d610b4b565b6001600160a01b031690610ff5565b610e846114d6565b6108f08161151f565b6000838302816000198587098281108382030391505080600003610ec457838281610eba57610eba611c28565b0492505050610f4b565b808411610ee45760405163227bc15360e01b815260040160405180910390fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b33610f5b610b4b565b6001600160a01b031614610b495760405163118cdaa760e01b8152336004820152602401610d1c565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b804710156110185760405163cd78605960e01b8152306004820152602401610d1c565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611065576040519150601f19603f3d011682016040523d82523d6000602084013e61106a565b606091505b50509050806109e157604051630a12f52160e11b815260040160405180910390fd5b600f54600a5460408051630d0e30db60e41b8152905160009384938493919247926001600160a01b039092169163d0e30db0918491600480820192899290919082900301818588803b1580156110e157600080fd5b505af11580156110f5573d6000803e3d6000fd5b5050600a546040516370a0823160e01b8152306004820152600094506001600160a01b0390911692506370a082319150602401602060405180830381865afa158015611145573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111699190611b8f565b90506111758382611527565b600954600b5460405163095ea7b360e01b81526001600160a01b0391821660048201526024810186905291169063095ea7b3906044016020604051808303816000875af11580156111ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ee9190611bbb565b50600a54600b5460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b3906044016020604051808303816000875af1158015611244573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112689190611bbb565b5060408051610160810182526009546001600160a01b039081168252600a54166020820152610bb89181019190915260008054909190606082019066010000000000008104600290810b916112c0918391900b611c3e565b6112ca9190611c78565b600290810b825260005460209092019166010000000000008104820b916112fc9183916301000000909104900b611c3e565b6113069190611c78565b60020b815260208101869052604080820185905260006060830181905260808301523060a08301524260c090920191909152600b549051634418b22b60e11b81529192506001600160a01b031690638831645690611368908490600401611c9f565b6080604051808303816000875af1158015611387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ab9190611d63565b600193909355909850965094508386101561143b57600954600b5460405163095ea7b360e01b81526001600160a01b0391821660048201526000602482015291169063095ea7b3906044016020604051808303816000875af1158015611415573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114399190611bbb565b505b818510156114be57600a54600b5460405163095ea7b360e01b81526001600160a01b0391821660048201526000602482015291169063095ea7b3906044016020604051808303816000875af1158015611498573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114bc9190611bbb565b505b50506007805460ff1916600117905550929391925090565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610b4957604051631afcd79f60e31b815260040160405180910390fd5b610cf66114d6565b600a546009546000918291829161154c916001600160a01b0391821691168787611605565b600b546040516309f56ab160e11b81526001600160a01b0380861660048301528085166024830152610bb86044830152808416606483015294975092955090935091909116906313ead562906084016020604051808303816000875af11580156115ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115de9190611dad565b600280546001600160a01b0319166001600160a01b03929092169190911790555050505050565b60008060006116148787611654565b90935091506001600160a01b038084169088161461163d5761163684866116f1565b905061164a565b61164785856116f1565b90505b9450945094915050565b6000806001600160a01b0384161580159061167757506001600160a01b03831615155b6116c35760405162461bcd60e51b815260206004820152601f60248201527f546f6b656e206164647265737365732063616e6e6f74206265207a65726f2e006044820152606401610d1c565b826001600160a01b0316846001600160a01b0316106116e35782846116e6565b83835b909590945092505050565b600080831180156117025750600082115b61174e5760405162461bcd60e51b815260206004820152601960248201527f5265736572766573206d75737420626520706f736974697665000000000000006044820152606401610d1c565b6000600160601b61177e6064866117658288611dca565b61176f9190611de1565b6117799190611de1565b611790565b6117889190611dca565b949350505050565b6000816000036117a257506000919050565b600060016117af84611878565b901c6001901b905060018184816117c8576117c8611c28565b048201901c905060018184816117e0576117e0611c28565b048201901c905060018184816117f8576117f8611c28565b048201901c9050600181848161181057611810611c28565b048201901c9050600181848161182857611828611c28565b048201901c9050600181848161184057611840611c28565b048201901c9050600181848161185857611858611c28565b048201901c9050610f4b8182858161187257611872611c28565b0461190d565b600080608083901c1561188d57608092831c92015b604083901c1561189f57604092831c92015b602083901c156118b157602092831c92015b601083901c156118c357601092831c92015b600883901c156118d557600892831c92015b600483901c156118e757600492831c92015b600283901c156118f957600292831c92015b600183901c15611907576001015b92915050565b600081831061191c5781610f4b565b5090919050565b6001600160a01b03811681146108f057600080fd5b60006020828403121561194a57600080fd5b8135610f4b81611923565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561198157600080fd5b843561198c81611923565b9350602085013561199c81611923565b925060408501359150606085013567ffffffffffffffff808211156119c057600080fd5b818701915087601f8301126119d457600080fd5b8135818111156119e6576119e6611955565b604051601f8201601f19908116603f01168101908382118183101715611a0e57611a0e611955565b816040528281528a6020848701011115611a2757600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600060e08284031215611a5d57600080fd5b50919050565b80151581146108f057600080fd5b6000813561190781611923565b80546001600160a01b0319166001600160a01b0392909216919091179055565b8135611aa981611a63565b815490151560ff1660ff19919091161781556020820135611ac981611923565b8154610100600160a81b031916600882901b610100600160a81b031617825550611b01611af860408401611a71565b60018301611a7e565b611b19611b1060608401611a71565b60028301611a7e565b611b31611b2860808401611a71565b60038301611a7e565b611b49611b4060a08401611a71565b60048301611a7e565b60c082013560058201555050565b634e487b7160e01b600052601160045260246000fd5b60008160020b627fffff198103611b8657611b86611b57565b60000392915050565b600060208284031215611ba157600080fd5b5051919050565b8082018082111561190757611907611b57565b600060208284031215611bcd57600080fd5b8151610f4b81611a63565b60008060408385031215611beb57600080fd5b505080516020909101519092909150565b600060018201611c0e57611c0e611b57565b5060010190565b8181038181111561190757611907611b57565b634e487b7160e01b600052601260045260246000fd5b60008160020b8360020b80611c5557611c55611c28565b627fffff19821460001982141615611c6f57611c6f611b57565b90059392505050565b60008260020b8260020b028060020b9150808214611c9857611c98611b57565b5092915050565b81516001600160a01b0316815261016081016020830151611ccb60208401826001600160a01b03169052565b506040830151611ce2604084018262ffffff169052565b506060830151611cf7606084018260020b9052565b506080830151611d0c608084018260020b9052565b5060a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151611d52828501826001600160a01b03169052565b505061014092830151919092015290565b60008060008060808587031215611d7957600080fd5b8451935060208501516001600160801b0381168114611d9757600080fd5b6040860151606090960151949790965092505050565b600060208284031215611dbf57600080fd5b8151610f4b81611923565b808202811582820484141761190757611907611b57565b600082611df057611df0611c28565b50049056fea264697066735822122047dc8bf659bf0c697cb6cce35b4b70324b45a4f9dd17b2a6ab9cd6fa3972fbc664736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "MathOverflowedMulDiv()": [
        {
          "details": "Muldiv operation overflow."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity()": {
        "notice": "Add Liquiduity after sale date ends"
      },
      "collectAllFees()": {
        "notice": "project dev can collect fees"
      },
      "removeTokens(address)": {
        "notice": "project dev remove any ERC20Tokens Sent here after Launch"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7647,
        "contract": "contracts/Fairlaunch.sol:Fairlaunch",
        "label": "MIN_TICK",
        "offset": 0,
        "slot": "0",
        "type": "t_int24"
      },
      {
        "astId": 7649,
        "contract": "contracts/Fairlaunch.sol:Fairlaunch",
        "label": "MAX_TICK",
        "offset": 3,
        "slot": "0",
        "type": "t_int24"
      },
      {
        "astId": 7651,
        "contract": "contracts/Fairlaunch.sol:Fairlaunch",
        "label": "TICK_SPACING",
        "offset": 6,
        "slot": "0",
        "type": "t_int24"
      },
      {
        "astId": 7653,
        "contract": "contracts/Fairlaunch.sol:Fairlaunch",
        "label": "tokenId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7655,
        "contract": "contracts/Fairlaunch.sol:Fairlaunch",
        "label": "pool",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 7659,
        "contract": "contracts/Fairlaunch.sol:Fairlaunch",
        "label": "contributions",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7663,
        "contract": "contracts/Fairlaunch.sol:Fairlaunch",
        "label": "claims",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7667,
        "contract": "contracts/Fairlaunch.sol:Fairlaunch",
        "label": "claimDate",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7669,
        "contract": "contracts/Fairlaunch.sol:Fairlaunch",
        "label": "teamHasClaimedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 7672,
        "contract": "contracts/Fairlaunch.sol:Fairlaunch",
        "label": "_settings",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Setting)9653_storage"
      },
      {
        "astId": 7675,
        "contract": "contracts/Fairlaunch.sol:Fairlaunch",
        "label": "_tokenomics",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(Tokenomics)9664_storage"
      },
      {
        "astId": 7677,
        "contract": "contracts/Fairlaunch.sol:Fairlaunch",
        "label": "count",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20Minimal)9617": {
        "encoding": "inplace",
        "label": "contract IERC20Minimal",
        "numberOfBytes": "20"
      },
      "t_contract(INonfungiblePositionManager)9869": {
        "encoding": "inplace",
        "label": "contract INonfungiblePositionManager",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH9)10193": {
        "encoding": "inplace",
        "label": "contract IWETH9",
        "numberOfBytes": "20"
      },
      "t_int24": {
        "encoding": "inplace",
        "label": "int24",
        "numberOfBytes": "3"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Setting)9653_storage": {
        "encoding": "inplace",
        "label": "struct IFairLaunch.Setting",
        "members": [
          {
            "astId": 9637,
            "contract": "contracts/Fairlaunch.sol:Fairlaunch",
            "label": "lpAdded",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9639,
            "contract": "contracts/Fairlaunch.sol:Fairlaunch",
            "label": "sleepfinance",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9641,
            "contract": "contracts/Fairlaunch.sol:Fairlaunch",
            "label": "team",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 9644,
            "contract": "contracts/Fairlaunch.sol:Fairlaunch",
            "label": "token",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IERC20Minimal)9617"
          },
          {
            "astId": 9647,
            "contract": "contracts/Fairlaunch.sol:Fairlaunch",
            "label": "weth",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IWETH9)10193"
          },
          {
            "astId": 9650,
            "contract": "contracts/Fairlaunch.sol:Fairlaunch",
            "label": "uniswap",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(INonfungiblePositionManager)9869"
          },
          {
            "astId": 9652,
            "contract": "contracts/Fairlaunch.sol:Fairlaunch",
            "label": "endTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Tokenomics)9664_storage": {
        "encoding": "inplace",
        "label": "struct IFairLaunch.Tokenomics",
        "members": [
          {
            "astId": 9655,
            "contract": "contracts/Fairlaunch.sol:Fairlaunch",
            "label": "membersReward",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9657,
            "contract": "contracts/Fairlaunch.sol:Fairlaunch",
            "label": "membersAllocation",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9659,
            "contract": "contracts/Fairlaunch.sol:Fairlaunch",
            "label": "liquidityAllocation",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9661,
            "contract": "contracts/Fairlaunch.sol:Fairlaunch",
            "label": "teamAllocation",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9663,
            "contract": "contracts/Fairlaunch.sol:Fairlaunch",
            "label": "totalContribution",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}